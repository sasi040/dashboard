/**
 * Reporting Tool
 * This is Reporting tool server.
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders,HttpResponse, HttpEvent }  from '@angular/common/http';
import { Observable } from 'rxjs';
import { TestExecution } from './interfaces/testExecution';
import { Configuration } from './configuration';

@Injectable({
    providedIn: 'root'
})
export class TestExecutionService {

    protected basePath = 'http://localhost:4200';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
        // if (basePath) {
        //     this.basePath = basePath;
        // }
        if (configuration) {
            this.configuration = configuration;
            // this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a test execution
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTestExecution(body: TestExecution, observe?: 'body', reportProgress?: boolean): Observable<TestExecution>;
    public createTestExecution(body: TestExecution, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestExecution>>;
    public createTestExecution(body: TestExecution, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestExecution>>;
    public createTestExecution(body: TestExecution, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createTestExecution.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<TestExecution>('post',`${this.basePath}/rs/test-execution`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of all test executions
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTestExecutions(observe?: 'body', reportProgress?: boolean): Observable<Array<TestExecution>>;
    public getAllTestExecutions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestExecution>>>;
    public getAllTestExecutions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestExecution>>>;
    public getAllTestExecutions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestExecution>>('get',`${this.basePath}/rs/test-execution`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a test execution by ID
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestExecutionById(id: number, observe?: 'body', reportProgress?: boolean): Observable<TestExecution>;
    public getTestExecutionById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestExecution>>;
    public getTestExecutionById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestExecution>>;
    public getTestExecutionById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTestExecutionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TestExecution>('get',`${this.basePath}/rs/test-execution/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of test executions by application ID
     * 
     * @param applicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    // public getTestExecutionsByApplication(applicationId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TestExecution>>;
     // public getTestExecutionsByApplication(applicationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestExecution>>>;
    // public getTestExecutionsByApplication(applicationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestExecution>>>;
    public getTestExecutionsByApplication(applicationId: number, observe: 'response', reportProgress: boolean = false ): Observable<HttpResponse<Array<TestExecution>>> {

        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling getTestExecutionsByApplication.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestExecution>>('get',`${this.basePath}/rs/test-execution/application/${encodeURIComponent(String(applicationId))}`,
            {
                // withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
