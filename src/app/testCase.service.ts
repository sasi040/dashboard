/**
 * Reporting Tool
 * This is Reporting tool server.
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders,
         HttpResponse, HttpEvent }                           from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { TestCase } from './interfaces/testCase';
import { Configuration }                                     from './configuration';


@Injectable({
    providedIn: 'root'
})
export class TestCaseService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



    /**
     * Get list of test cases of a test execution
     * 
     * @param testExecutionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestCaseByExecution(testExecutionId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TestCase>>;
    public getTestCaseByExecution(testExecutionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestCase>>>;
    public getTestCaseByExecution(testExecutionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestCase>>>;
    public getTestCaseByExecution(testExecutionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testExecutionId === null || testExecutionId === undefined) {
            throw new Error('Required parameter testExecutionId was null or undefined when calling getTestCaseByExecution.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestCase>>('get',`${this.basePath}/rs/test-case/execution/${encodeURIComponent(String(testExecutionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of test cases of a test execution filtered by execution statuses
     * 
     * @param testExecutionId 
     * @param executionStatuses 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    // public getTestCaseByExecutionAndStatus(testExecutionId: number, executionStatuses: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<TestCase>>;
    // public getTestCaseByExecutionAndStatus(testExecutionId: number, executionStatuses: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestCase>>>;
    // public getTestCaseByExecutionAndStatus(testExecutionId: number, executionStatuses: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestCase>>>;
    public getTestCaseByExecutionAndStatus(testExecutionId: number, executionStatuses: Array<string>, observe?: 'response', reportProgress: boolean = false ): Observable<HttpResponse<Array<TestCase>>> {

        if (testExecutionId === null || testExecutionId === undefined) {
            throw new Error('Required parameter testExecutionId was null or undefined when calling getTestCaseByExecutionAndStatus.');
        }

        if (executionStatuses === null || executionStatuses === undefined) {
            throw new Error('Required parameter executionStatuses was null or undefined when calling getTestCaseByExecutionAndStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestCase>>('get',`${this.basePath}/rs/test-case/execution/${encodeURIComponent(String(testExecutionId))}/status/${encodeURIComponent(String(executionStatuses))}`,
            {
               // withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a test cases by it&#x27;s ID
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestCaseById(id: number, observe?: 'body', reportProgress?: boolean): Observable<TestCase>;
    public getTestCaseById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestCase>>;
    public getTestCaseById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestCase>>;
    public getTestCaseById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTestCaseById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TestCase>('get',`${this.basePath}/rs/test-case/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of test cases of a test suite
     * 
     * @param testSuiteId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestCaseBySuite(testSuiteId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TestCase>>;
    public getTestCaseBySuite(testSuiteId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestCase>>>;
    public getTestCaseBySuite(testSuiteId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestCase>>>;
    public getTestCaseBySuite(testSuiteId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testSuiteId === null || testSuiteId === undefined) {
            throw new Error('Required parameter testSuiteId was null or undefined when calling getTestCaseBySuite.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestCase>>('get',`${this.basePath}/rs/test-case/suite/${encodeURIComponent(String(testSuiteId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of test cases of a test suite filtered by execution statuses
     * 
     * @param testSuiteId 
     * @param executionStatuses 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestCaseBySuiteAndStatus(testSuiteId: number, executionStatuses: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<TestCase>>;
    public getTestCaseBySuiteAndStatus(testSuiteId: number, executionStatuses: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestCase>>>;
    public getTestCaseBySuiteAndStatus(testSuiteId: number, executionStatuses: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestCase>>>;
    public getTestCaseBySuiteAndStatus(testSuiteId: number, executionStatuses: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testSuiteId === null || testSuiteId === undefined) {
            throw new Error('Required parameter testSuiteId was null or undefined when calling getTestCaseBySuiteAndStatus.');
        }

        if (executionStatuses === null || executionStatuses === undefined) {
            throw new Error('Required parameter executionStatuses was null or undefined when calling getTestCaseBySuiteAndStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestCase>>('get',`${this.basePath}/rs/test-case/suite/${encodeURIComponent(String(testSuiteId))}/status/${encodeURIComponent(String(executionStatuses))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of all Test Cases
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestCases(observe?: 'body', reportProgress?: boolean): Observable<Array<TestCase>>;
    public getTestCases(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestCase>>>;
    public getTestCases(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestCase>>>;
    public getTestCases(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TestCase>>('get',`${this.basePath}/rs/test-case`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update execution status of a test case
     * 
     * @param id 
     * @param executionStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTestCaseStatus(id: number, executionStatus: string, observe?: 'body', reportProgress?: boolean): Observable<TestCase>;
    public updateTestCaseStatus(id: number, executionStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestCase>>;
    public updateTestCaseStatus(id: number, executionStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestCase>>;
    public updateTestCaseStatus(id: number, executionStatus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTestCaseStatus.');
        }

        if (executionStatus === null || executionStatus === undefined) {
            throw new Error('Required parameter executionStatus was null or undefined when calling updateTestCaseStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TestCase>('put',`${this.basePath}/rs/test-case/${encodeURIComponent(String(id))}/status/${encodeURIComponent(String(executionStatus))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update execution status and end time of a test case
     * 
     * @param id 
     * @param executionStatus 
     * @param executionEndTime 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTestCaseStatusAndExecutionEndTime(id: number, executionStatus: string, executionEndTime: Date, observe?: 'body', reportProgress?: boolean): Observable<TestCase>;
    public updateTestCaseStatusAndExecutionEndTime(id: number, executionStatus: string, executionEndTime: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestCase>>;
    public updateTestCaseStatusAndExecutionEndTime(id: number, executionStatus: string, executionEndTime: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestCase>>;
    public updateTestCaseStatusAndExecutionEndTime(id: number, executionStatus: string, executionEndTime: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTestCaseStatusAndExecutionEndTime.');
        }

        if (executionStatus === null || executionStatus === undefined) {
            throw new Error('Required parameter executionStatus was null or undefined when calling updateTestCaseStatusAndExecutionEndTime.');
        }

        if (executionEndTime === null || executionEndTime === undefined) {
            throw new Error('Required parameter executionEndTime was null or undefined when calling updateTestCaseStatusAndExecutionEndTime.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TestCase>('put',`${this.basePath}/rs/test-case/${encodeURIComponent(String(id))}/status/${encodeURIComponent(String(executionStatus))}/endTime/${encodeURIComponent(String(executionEndTime))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
